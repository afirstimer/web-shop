// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  password  String
  avatar    String?
  createdAt DateTime  @default(now())
  shops     Shop[]
  listings  Listing[]
}

model Shop {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String          @unique
  code             String          @unique
  userId           String          @db.ObjectId
  User             User            @relation(fields: [userId], references: [id])
  createdAt        DateTime        @default(now())
  updatedat        DateTime        @updatedAt
  status           String
  priceDiff        Int
  shopItems        Int
  images           String[]
  refreshToken     String?
  accessToken      String?
  signString       String?
  tiktokShopCipher String?
  tiktokTimestamp  Int?
  defaultShop      Int
  listings         ListingOnShop[]
  products         Product[]       @relation("ShopProducts")
}

model Listing {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  images           String[]
  price            String
  crawlUrl         String?
  sku              String?
  productDimension String?
  packageDimension String?
  itemModelNumber  String?
  upc              String?
  manufacturer     String?
  countryOfOrigin  String?
  description      String
  user             User            @relation(fields: [userId], references: [id])
  userId           String          @db.ObjectId
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  shops            ListingOnShop[]
  products         Product[]       @relation("ListingProducts")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       String
  listing     Listing  @relation("ListingProducts", fields: [listingId], references: [id])
  shop        Shop?    @relation("ShopProducts", fields: [shopId], references: [id])
  listingId   String   @db.ObjectId
  shopId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ListingOnShop {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String  @db.ObjectId
  listingId String  @db.ObjectId
  shop      Shop    @relation(fields: [shopId], references: [id])
  listing   Listing @relation(fields: [listingId], references: [id])
  status    Status  @default(PENDING)
}

model Template {
  id                         String       @id @default(auto()) @map("_id") @db.ObjectId
  name                       String?
  description                String?
  type                       TemplateType @default(Dropshipping)
  productTemplate            String
  productTemplateDescription String
  categoryId                 String
  attributes                 String?
  compliances                String?
  skus                       String?
  identifierCode             String?
  skuPrice                   String?
  skuQty                     String?
  skuSeller                  String?
  isSale                     Int
  isCOD                      Int
  packageWeight              String?
  packageLength              String
  packageWidth               String
  packageHeight              String
}

model Setting {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  accessToken      String?
  shopAccessToken  String?
  shopRefreshToken String?
  expiredIn        Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Proxy {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ProxyType @default(SOCKS5)
  hostname  String
  port      String
  isActive  Int       @default(0)
  username  String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ProxyType {
  HTTP
  HTTPS
  SOCKS5
}

enum ProductSku {
  Color
}

enum TemplateType {
  Dropshipping
  POD
}

enum Status {
  SUCCESS
  FAILURE
  PENDING
}
